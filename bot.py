import logging
import matplotlib.pyplot as plt
import pytz
import gspread
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Router
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import os
from aiogram.types import FSInputFile  
from io import BytesIO, BufferedReader 


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü
initial_budget = None

fake_date = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ñ–µ–π–∫–æ–≤–æ–π –¥–∞—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive.file"]
credentials_json = json.loads(os.getenv("CREDENTIALS_FILE"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_json, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_NAME).sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ ID

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏ —Å–æ–∑–¥–∞—ë–º –∏—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
headers = sheet.row_values(1)
if not headers or headers[0] != "–°—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤":
    sheet.insert_row(["–°—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å, AMD"], index=1)

cached_budget = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
last_budget_update = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

def get_daily_budget_limit():
    global cached_budget, last_budget_update
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–∫–æ–≤—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        current_date = datetime.strptime(fake_date, "%Y-%m-%d") if fake_date else datetime.now()
        current_date_str = current_date.strftime("%Y-%m-%d")
        current_month = current_date.strftime("%Y-%m")

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        if cached_budget is not None and last_budget_update == current_date_str:
            return cached_budget

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        values = sheet.get_all_values()
        for row in values:
            if row[0] == "Daily budget limit, AMD":
                raw_value = row[1].strip().replace("¬†", "").replace(",", ".")
                budget = float(raw_value)

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Å —É—á—ë—Ç–æ–º —Ñ–µ–π–∫–æ–≤–æ–π –¥–∞—Ç—ã
                new_budget = recalculate_daily_budget(budget)
                cached_budget = new_budget
                last_budget_update = current_date_str

                logging.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {cached_budget}")
                return cached_budget

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
    return None


def create_new_month_sheet():
    try:
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏–ª–∏ —Ñ–µ–π–∫–æ–≤–∞—è –¥–∞—Ç–∞
        today = datetime.strptime(fake_date, "%Y-%m-%d") if fake_date else datetime.now()
        new_sheet_title = today.strftime("%Y-%m")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ª–∏—Å—Ç –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü
        if new_sheet_title in [sheet.title for sheet in client.open_by_key(SPREADSHEET_NAME).worksheets()]:
            logging.info(f"–õ–∏—Å—Ç {new_sheet_title} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
        new_sheet = client.open_by_key(SPREADSHEET_NAME).add_worksheet(title=new_sheet_title, rows="100", cols="20")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–æ —Ä–∞–∑–¥–µ–ª–∞ "Daily expenses"
        source_data = sheet.get_all_values()
        for i, row in enumerate(source_data):
            if "Daily expenses" in row:
                end_index = i
                break

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π –ª–∏—Å—Ç
        new_sheet.update("A1", source_data[:end_index + 1])
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç: {new_sheet_title} —Å –∫–æ–ø–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–æ 'Daily expenses'")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")


@router.message()
async def add_expense(message: Message):
    global cached_budget
    try:
        text = message.text.strip().split(",")
        if len(text) != 2:
            await message.answer("–í–≤–µ–¥–∏ —Ç—Ä–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, 1500")
            return

        category = text[0].strip()
        amount = text[1].strip()

        if not amount.replace(".", "").isdigit():
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, 1500")
            return

        amount = float(amount)
        date_today = datetime.now().strftime("%Y-%m-%d")

        # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        sheet.append_row([category, amount, date_today], table_range="A20:C")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –î–û –ø–µ—Ä–µ—Å—á—ë—Ç–∞
        original_budget = cached_budget if cached_budget is not None else get_daily_budget_limit()

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç –ø–æ—Å–ª–µ –Ω–æ–≤–æ–π —Ç—Ä–∞—Ç—ã
        cached_budget = recalculate_daily_budget(get_daily_budget_limit())

        # –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        total_spent = get_today_expenses()

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –ò–°–•–û–î–ù–û–ì–û –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        percent_spent = (total_spent / original_budget) * 100 if original_budget > 0 else 100

        await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {category} - {amount} AMD\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ {percent_spent:.2f}% –æ—Ç —Å—É–º–º—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ª–∏–º–∏—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
def get_remaining_days():
    today = datetime.strptime(fake_date, "%Y-%m-%d") if fake_date else datetime.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fake_date
    last_day = (today.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
    return (last_day - today).days + 1  # –í–∫–ª—é—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ç—Ä–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_expenses():
    try:
        import pytz
        armenia_tz = pytz.timezone('Asia/Yerevan')
        values = sheet.get_all_values()
        total_spent = 0
        today = fake_date if fake_date else datetime.now(armenia_tz).strftime("%Y-%m-%d")

        for row in values:
            if len(row) >= 3:
                expense_date = row[2].strip()
                if expense_date == today:
                    try:
                        expense_amount = float(row[1].strip().replace(",", "").replace("¬†", ""))
                        total_spent += expense_amount
                    except ValueError:
                        continue

        return total_spent
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Ç—Ä–∞—Ç: {e}")
    return 0



def recalculate_daily_budget(initial_budget):
	try:
		# üü¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pytz –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
		import pytz  
		armenia_tz = pytz.timezone('Asia/Yerevan')
		current_date = datetime.now(armenia_tz) if not fake_date else datetime.strptime(fake_date, "%Y-%m-%d")

		# üü¢ –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –±–µ–∑ +1 –¥–Ω—è
		last_day_of_month = armenia_tz.localize(datetime(current_date.year, current_date.month, 31))
		# üü¢ –î–æ–±–∞–≤–ª—è–µ–º +1 –¥–µ–Ω—å, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
		remaining_days = max((last_day_of_month - current_date).days + 1, 0)

		# üü¢ –§–∏–∫—Å–∏—Ä—É–µ–º –æ–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –∏–∑ —è—á–µ–π–∫–∏ B17
		fixed_monthly_budget = get_monthly_budget()

		# üü¢ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
		values = sheet.get_all_values()
		total_budget_spent = 0
		for row in values:
			if len(row) >= 3:
				try:
					expense_date = row[2].strip()
					expense_amount = float(row[1].strip().replace(",", "").replace("¬†", ""))
					# üü¢ –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–µ–π–∫–æ–≤–æ–π –¥–∞—Ç—ã
					if expense_date[:7] == current_date.strftime("%Y-%m"):
						total_budget_spent += expense_amount
				except ValueError:
					continue

		# üü¢ –û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç –∑–∞ –º–µ—Å—è—Ü
		remaining_budget = fixed_monthly_budget - total_budget_spent

		# üü¢ –ï—Å–ª–∏ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥, —É–º–µ–Ω—å—à–∞–µ–º –±—É–¥—É—â–∏–µ –ª–∏–º–∏—Ç—ã
		if total_budget_spent > fixed_monthly_budget:
			logging.info(f"–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥! –ë—é–¥–∂–µ—Ç –≤ –º–∏–Ω—É—Å–µ: {total_budget_spent - fixed_monthly_budget} AMD")
			remaining_budget = 0

		# üü¢ –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		logging.info(f"=== –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ===")
		logging.info(f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç: {fixed_monthly_budget}")
		logging.info(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {total_budget_spent}")
		logging.info(f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {remaining_budget}")
		logging.info(f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ: {remaining_days}")

		# üü¢ –ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
		if remaining_days > 0:
			new_budget = max(remaining_budget / remaining_days, 0)
		else:
			new_budget = 0

		logging.info(f"–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_budget}")
		logging.info(f"===================================")

		return round(new_budget, 2)

	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ –±—é–¥–∂–µ—Ç–∞: {e}")
		return initial_budget









def get_daily_budget_limit():
    global cached_budget, last_budget_update
    try:
        current_date = fake_date if fake_date else datetime.now().strftime("%Y-%m-%d")
        current_month = fake_date[:7] if fake_date else datetime.now().strftime("%Y-%m")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –º–µ—Å—è—Ü–∞ –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if last_budget_update and last_budget_update[:7] != current_month:
            create_new_month_sheet()

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        if cached_budget is not None and last_budget_update == current_date:
            return cached_budget  

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        values = sheet.get_all_values()
        for row in values:
            if row[0] == "Daily budget limit, AMD":
                raw_value = row[1].strip().replace("¬†", "").replace(",", ".")
                budget = float(raw_value)

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –¥–µ–Ω—å
                new_budget = recalculate_daily_budget(budget) if last_budget_update != current_date else budget
                cached_budget = new_budget
                last_budget_update = current_date

                logging.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {cached_budget}")
                return cached_budget

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
    return None


@router.message(Command("budget_default"))
async def reset_budget(message: Message):
    global cached_budget, last_budget_update
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        cached_budget = None
        last_budget_update = None

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Google Sheets –ë–ï–ó –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞!
        values = sheet.get_all_values()
        for row in values:
            if row[0] == "Daily budget limit, AMD":
                raw_value = row[1].strip().replace("¬†", "").replace(",", ".")
                cached_budget = float(raw_value)  # –ü—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∏–º–∏—Ç
                last_budget_update = datetime.now()
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        
        if cached_budget is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±—é–¥–∂–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        else:
            await message.answer(f"–ë—é–¥–∂–µ—Ç —Å–±—Ä–æ—à–µ–Ω!\n–ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {cached_budget:.2f} AMD")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±—é–¥–∂–µ—Ç–∞.")


@router.message(Command("budget_now"))
async def get_current_budget(message: Message):
    try:
        daily_budget = get_daily_budget_limit()
        if daily_budget is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç.")
        else:
            await message.answer(f"–¢–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_budget:.2f} AMD")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞.")


@router.message(Command("budget_left"))
async def get_budget_left(message: Message):
    try:
        import pytz
        armenia_tz = pytz.timezone('Asia/Yerevan')
        
        # üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        today = fake_date if fake_date else datetime.now(armenia_tz).strftime("%Y-%m-%d")
        
        daily_budget = get_daily_budget_limit()
        total_spent_today = get_today_expenses()

        budget_left = max(daily_budget - total_spent_today, 0)

        await message.answer(f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {budget_left:.2f} AMD")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –±—é–¥–∂–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –±—é–¥–∂–µ—Ç–∞.")


@router.message(Command("set_date"))
async def set_fake_date(message: Message):
    global fake_date, cached_budget, last_budget_update
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /set_date YYYY-MM-DD –∏–ª–∏ /set_date reset")
            return
        
        new_date = parts[1]

        if new_date.lower() == "reset":  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É
            fake_date = None
            cached_budget = None
            last_budget_update = None
            await message.answer("–î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ë–æ—Ç —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(new_date, "%Y-%m-%d")
        fake_date = new_date  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é –¥–∞—Ç—É

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç
        cached_budget = None
        last_budget_update = None

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–µ–π–∫–æ–≤–æ–π –¥–∞—Ç—ã
        new_budget = get_daily_budget_limit()

        if new_budget is not None:
            await message.answer(f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {fake_date}\n–ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {new_budget:.2f} AMD")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã.")

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /set_date YYYY-MM-DD –∏–ª–∏ /set_date reset")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–µ–π–∫–æ–≤–æ–π –¥–∞—Ç—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã.")


def get_monthly_budget():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏ B17 ("Balance, AMD")
        value = sheet.acell("B17").value
        return float(value.strip().replace(",", "").replace("¬†", ""))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞: {e}")
        return 0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

@router.message(Command("stats"))
async def get_monthly_stats(message: Message):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–∫–æ–≤—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        current_date = datetime.strptime(fake_date, "%Y-%m-%d") if fake_date else datetime.now()
        current_month = current_date.strftime("%Y-%m")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –Ω–∞—á–∏–Ω–∞—è —Å A21
        values = sheet.get("A21:C1000")  # –°–º–æ—Ç—Ä–∏–º –¥–æ —Ç—ã—Å—è—á–∏ —Å—Ç—Ä–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        # –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_totals = {}
        total_spent = 0

        for row in values:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if len(row) < 3 or not row[1].strip().replace(",", "").replace("¬†", "").isdigit():
                continue

            try:
                category = row[0].strip()
                amount = float(row[1].strip().replace(",", "").replace("¬†", ""))
                date = row[2].strip()

                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                if date.startswith(current_month):
                    if category in category_totals:
                        category_totals[category] += amount
                    else:
                        category_totals[category] = amount
                    total_spent += amount
            except ValueError:
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if category_totals:
            stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n"
            for category, total in sorted(category_totals.items(), key=lambda x: x[1], reverse=True):
                stats_message += f"- {category}: {total:.2f} AMD\n"
            stats_message += f"–í—Å–µ–≥–æ: {total_spent:.2f} AMD"
        else:
            stats_message = "üìä –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç."

        await message.answer(stats_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import Message

# üü¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ï—Ä–µ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ pytz
timezone = pytz.timezone('Asia/Yerevan')

# üü¢ –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pytz
scheduler = AsyncIOScheduler(timezone=timezone)

# üîÑ –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id
YOUR_CHAT_ID = 151719897  # –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id

# üü¢ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
async def send_weekly_stats():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ get_monthly_stats
        message = Message(chat={'id': YOUR_CHAT_ID})
        await get_monthly_stats(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# üü¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00
scheduler.add_job(send_weekly_stats, CronTrigger(day_of_week='mon', hour=14, minute=0))




# üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def generate_expense_chart():
	try:
		values = sheet.get("A21:C1000")
		date_totals = {}

		# üü¢ –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –∏–∑ —è—á–µ–µ–∫ B17 –∏ B18
		total_budget = float(sheet.acell("B17").value.strip().replace(",", "").replace("¬†", ""))
		first_day_budget = float(sheet.acell("B18").value.strip().replace(",", ".").replace("¬†", ""))

		if first_day_budget > total_budget:
			print("Warning: First day budget is too high! Using total budget instead.")
			first_day_budget = total_budget

		print("Total budget (B17):", total_budget)
		print("First day budget (B18):", first_day_budget)

		for row in values:
			if len(row) < 3 or not row[1].strip().replace(",", "").replace("¬†", "").isdigit():
				continue
			date = datetime.strptime(row[2].strip(), "%Y-%m-%d")
			amount = float(row[1].strip().replace(",", "").replace("¬†", ""))
			date_totals[date] = date_totals.get(date, 0) + amount

		# üü¢ –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ —Ç—Ä–∞—Ç—ã –¥–ª—è –¥–Ω–µ–π –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
		start_date = min(date_totals.keys())
		end_date = max(date_totals.keys())
		current_date = start_date

		while current_date <= end_date:
			if current_date not in date_totals:
				date_totals[current_date] = 0  # üü¢ –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –¥–µ–Ω—å, —Å—Ç–∞–≤–∏–º 0
			current_date += timedelta(days=1)

		print("Dates and amounts:", date_totals)

		sorted_dates = sorted(date_totals.keys())
		sorted_amounts = [date_totals.get(date, 0) for date in sorted_dates]

		print("Sorted amounts:", sorted_amounts)

		budget_line = []
		remaining_budget = total_budget
		spent_so_far = 0

		for i, date in enumerate(sorted_dates):
			if i == 0:
				budget_line.append(first_day_budget)
			else:
				spent_so_far += sorted_amounts[i - 1]

			last_day_of_month = date.replace(day=31)
			remaining_days = (last_day_of_month - date).days

			remaining_budget -= sorted_amounts[i]

			if remaining_days > 0:
				daily_budget = max(remaining_budget / remaining_days, 0)
			else:
				daily_budget = 0

			print(f"Date: {date}, Spent so far: {spent_so_far}, Remaining days: {remaining_days}, Remaining budget: {remaining_budget}, Daily budget: {daily_budget}")
			budget_line.append(daily_budget)

		# üü¢ –°—Ç—Ä–æ–∏–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
		plt.figure(figsize=(10, 5))
		plt.bar(sorted_dates, sorted_amounts, color='skyblue', label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã')

		# üü¢ –õ–∏–Ω–∏—è –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
		plt.plot(sorted_dates, budget_line, linestyle='--', color='orange', label='–î–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç', marker='o')

		plt.title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º")
		plt.xlabel("–î–∞—Ç–∞")
		plt.ylabel("–°—É–º–º–∞ (AMD)")
		plt.grid(axis='y', linestyle='--', alpha=0.7)
		plt.xticks(sorted_dates, rotation=45, ha='right')
		plt.legend()
		plt.tight_layout()

		image_stream = BytesIO()
		plt.savefig(image_stream, format='png')
		image_stream.seek(0)
		plt.close()

		return image_stream
	except Exception as e:
		logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
		return None



# üñº –ö–æ–º–∞–Ω–¥–∞ /chart –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
@router.message(Command("chart"))
async def send_expense_chart(message: Message):
    try:
        image_stream = generate_expense_chart()
        if image_stream:
            # üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open("expense_chart.png", "wb") as f:
                f.write(image_stream.getbuffer())
            
            # üü¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ FSInputFile
            photo = FSInputFile("expense_chart.png")
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞.")






async def main():

    dp.message.register(get_monthly_stats, Command("stats"))
    dp.message.register(send_expense_chart, Command("chart"))
    dp.message.register(set_fake_date, Command("set_date"))
    dp.message.register(get_budget_left, Command("budget_left"))
    dp.message.register(reset_budget, Command("budget_default"))  # –°–±—Ä–æ—Å –±—é–¥–∂–µ—Ç–∞
    dp.message.register(get_current_budget, Command("budget_now"))  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


   # üü¢ –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ main
    scheduler.start()



if __name__ == "__main__":
    asyncio.run(main())